# Code generated by font_to_py.py.
# Font: helvetica_bold.ttf Char set: 0123456789:
# Cmd: C:\Users\andre\AppData\Local\Programs\Python\Python310\Scripts\font_to_py helvetica_bold.ttf 22 helvetica22_b.py -k digits.txt
version = '0.42'

def height():
    return 21

def baseline():
    return 21

def max_width():
    return 18

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 48

def max_ch():
    return 63

_font =\
b'\x12\x00\x03\xf0\x00\x0f\xfc\x00\x1f\xfe\x00\x3f\xfe\x00\x3e\x1f'\
b'\x00\x3c\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x1f\x00\x00\x3e\x00'\
b'\x00\x7c\x00\x00\xf8\x00\x01\xf0\x00\x01\xe0\x00\x01\xe0\x00\x00'\
b'\x00\x00\x00\x00\x00\x01\xe0\x00\x01\xe0\x00\x01\xe0\x00\x01\xe0'\
b'\x00\x10\x00\x07\xe0\x0f\xf0\x1f\xf8\x3f\xfc\x3c\x3c\x7c\x3c\x78'\
b'\x1e\x78\x1e\x78\x1e\x78\x1e\x78\x1e\x78\x1e\x78\x1e\x78\x1e\x78'\
b'\x1e\x7c\x3c\x3c\x3c\x3f\xfc\x1f\xf8\x0f\xf8\x07\xe0\x10\x00\x00'\
b'\x00\x00\xe0\x01\xe0\x03\xe0\x1f\xe0\x1f\xe0\x1f\xe0\x01\xe0\x01'\
b'\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01'\
b'\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x10\x00\x07\xe0\x1f\xf8\x3f'\
b'\xfc\x3f\xfc\x7c\x3e\x78\x1e\x78\x1e\x00\x1e\x00\x1e\x00\x3c\x00'\
b'\x7c\x01\xf8\x03\xf0\x07\xe0\x0f\x80\x1f\x00\x3c\x00\x3f\xfe\x7f'\
b'\xfe\x7f\xfe\x7f\xfe\x10\x00\x07\xe0\x1f\xf0\x3f\xf8\x7f\xfc\x7c'\
b'\x7c\x78\x3c\x00\x3c\x00\x3c\x00\x78\x03\xf8\x03\xf8\x03\xfc\x00'\
b'\x3e\x00\x1e\x00\x1e\x78\x1e\x7c\x3e\x7f\xfc\x3f\xfc\x1f\xf8\x07'\
b'\xe0\x10\x00\x00\x00\x00\x00\x00\xf8\x00\xf8\x01\xf8\x03\x78\x03'\
b'\x78\x06\x78\x0c\x78\x0c\x78\x18\x78\x38\x78\x30\x78\x7f\xfe\x7f'\
b'\xfe\x7f\xfe\x7f\xfe\x00\x78\x00\x78\x00\x78\x00\x78\x10\x00\x1f'\
b'\xfc\x1f\xfc\x1f\xfc\x1f\xfc\x3c\x00\x3c\x00\x38\x00\x3b\xe0\x3f'\
b'\xf8\x3f\xfc\x3f\xfc\x00\x3e\x00\x1e\x00\x1e\x00\x1e\x78\x1e\x7c'\
b'\x3e\x3f\xfc\x3f\xf8\x1f\xf8\x07\xe0\x10\x00\x03\xe0\x0f\xf8\x1f'\
b'\xfc\x3f\xfc\x3e\x3c\x3c\x00\x78\x00\x79\xe0\x7f\xf8\x7f\xfc\x7f'\
b'\xfc\x7c\x3e\x78\x1e\x78\x1e\x78\x1e\x78\x1e\x3c\x3e\x3f\xfc\x1f'\
b'\xfc\x0f\xf8\x07\xe0\x10\x00\x7f\xfe\x7f\xfe\x7f\xfe\x7f\xfe\x00'\
b'\x3c\x00\x38\x00\x78\x00\xf0\x00\xf0\x01\xe0\x01\xe0\x03\xc0\x03'\
b'\xc0\x07\x80\x07\x80\x07\x80\x07\x80\x0f\x00\x0f\x00\x0f\x00\x0f'\
b'\x00\x10\x00\x07\xe0\x1f\xf8\x3f\xfc\x7f\xfe\x7c\x3e\x78\x1e\x78'\
b'\x1e\x7c\x3e\x3f\xfc\x1f\xf8\x3f\xfc\x3f\xfc\x7c\x3e\x78\x1e\x78'\
b'\x1e\x78\x1e\x7c\x3e\x3f\xfc\x3f\xfc\x1f\xf8\x07\xe0\x10\x00\x07'\
b'\xe0\x1f\xf0\x3f\xf8\x3f\xfc\x7c\x3c\x78\x1e\x78\x1e\x78\x1e\x78'\
b'\x1e\x7c\x3e\x3f\xfe\x3f\xfe\x1f\xfe\x07\x9e\x00\x1e\x00\x3c\x7c'\
b'\x7c\x3f\xf8\x3f\xf8\x1f\xf0\x07\xc0\x0a\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x1e'\
b'\x00\x1e\x00\x1e\x00'

_index =\
b'\x00\x00\x41\x00\x6d\x00\x99\x00\xc5\x00\xf1\x00\x1d\x01\x49\x01'\
b'\x75\x01\xa1\x01\xcd\x01\xf9\x01\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x25\x02'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 48 + 1) if oc >= 48 and oc <= 63 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 21
    return _mvfont[doff + 2:next_offs], 21, width

